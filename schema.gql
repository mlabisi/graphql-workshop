type Address {
    id: ID
    streetNumber: String
    streetName: String!
    city: String
    zipcode: Int
}

type MenuItem {
    id: ID
    name: String!
    price: Float
}

type HoursItem {
    id: ID
    openTime: String
    closeTime: String
}

type ShopOwner {
    id: ID
    firstName: String!
    lastName: String
}

type Shop {
    id: ID
    shopOwner: ShopOwner
    name: String!
    address: Address
    menu: [MenuItem]
    hours: HoursItem
}

type RootQuery {
    shops: [Shop]
    shopOwners: [ShopOwner]
    items: [MenuItem]
    item(name: String, id: ID): MenuItem
    shop(id:ID, name: String): Shop
    shopOwner(id:ID, firstName: String): ShopOwner
}

type RootMutation {
    addMenuItem(name: String!, price: Float): MenuItem
    addShop(name: String, shopOwnerId: Int, streetNumber: String, streetName: String): Shop
}

schema {
    query: RootQuery
    mutation: RootMutation
}